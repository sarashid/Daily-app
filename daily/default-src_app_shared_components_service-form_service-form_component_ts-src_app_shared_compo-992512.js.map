{"version":3,"file":"default-src_app_shared_components_service-form_service-form_component_ts-src_app_shared_compo-992512.js","mappings":"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","names":["PricesService","constructor","http","getAll","type","this","get","environment","Defines","managePgGroup","body","editMode","post","getPgGroupById","id","pgGroupId","updatePriceGroups","list","priceGroupList","deletePriceGroup","i0","factory","RateplansService","getAllRatePlans","baseUrl","updateRatePlan","rateplans","updatedrateplans","rateplan","push","ratePlanCode","showFlag","ratePlanGroupKey","Object","updateRateplansList","console","log","ratePlans","getRateplaneGroup","key","parseInt","getAllRatePlanGroups","updateRatePlanGroup","rateplanGroup","createRateplanGroup","rateplaneGroup","deletRateplanGroup","TariffsClassesService","Subject","getAllServices","updateServices","tariffModelList","serviceClasseList","ctx_r9","oxw","ctx_r12","ServiceFormComponent","tariffClassesService","ngOnInit","initForm","source","searchForm","FormGroup","tariffModelName","FormControl","tariffModelType","hybird","contractType","activationSource","bundleType","deactivationSourceFlag","serviceClassName","serviceClassType","deacSourceFlag","ratePlan","ratePlanType","activationSourceFlag","description","ratePlanGroup","priceGroup","pgGroup","userId","date","onSubmit","searchSubject","next","value","resetForm","reset","clearSubject","selectors","ctx","ctx_r28","ctx_r31","f","ctx_r34","ServicesListComponent","cdr","tariffsClasses","rateplansService","pricesService","confirmationService","router","priceService","footprintService","getALLServices","searchSubscription","subscribe","filters","servicesList","tableListclone","filter","el","toLowerCase","searchStr","includes","clearFormArray","fillFormArray","epochDate","getTime","getAllFootprints","clearSubscription","flag","resp","oldratePlan","handleRateplansoldValue","payload","handleOldValue","res","handlePriceGroupOldValue","handlePriceGroupResponse","allPriceGroupGroupsResponses","response","priceGroupModel","map","item","pgGroupKey","pgKey","servicesForm","length","removeAt","servicesArray","FormArray","ngAfterContentChecked","detectChanges","getControls","controls","forEach","tableName","tariffModelCode","serviceClassCode","disabled","userName","pageName","objectIdentifier","actionName","tableList","detectFormArryChanges","updateList","Changeditems","data","handleNewValue","priceGroupCode","manageEdit","row","index","editPgGroup","editRateplaneGroup","manageDelete","event","confirm","target","message","icon","accept","clear","reject","url","viewDetails","enableUpdate","navigateByUrl","changesUnsubscribe","merge","control","valueChanges","pipe","takeUntil","rowIndex","changes","onValueChanged","existing","i","_a","JSON","parse","stringify","bodyRequest","echoDate","getTodayInTime","footPrintSubscription","getFootprintsRequest","logModelList","openLogDetails","transactionUserDetails","openDialog","show","empty","ngOnDestroy","t","unsubscribe","_b","l","_c"],"sourceRoot":"webpack:///","sources":["./src/app/prices/services/prices.service.ts","./src/app/rateplans/services/rateplans.service.ts","./src/app/services-tariffs/services/tariffs-classes.service.ts","./src/app/shared/components/service-form/service-form.component.html","./src/app/shared/components/service-form/service-form.component.ts","./src/app/shared/components/services-list/services-list.component.html","./src/app/shared/components/services-list/services-list.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiResponse } from 'src/app/shared/statics/apiResponse';\r\nimport { Defines } from 'src/app/shared/statics/defines';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PricesService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAll(type: string) {\r\n    let serviceType =\r\n      type === 'prices' ? Defines.LOOKUPS.PRICES : Defines.LOOKUPS.PG;\r\n    return this.http.get<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.LOOKUPS.LOOKUP_PATH +\r\n        serviceType +\r\n        Defines.CRUD.GET_ALL,\r\n      {}\r\n    );\r\n  }\r\n  managePgGroup(body: any, editMode?: boolean) {\r\n    let status = editMode ? Defines.CRUD.UPDATE : Defines.CRUD.ADD;\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.LOOKUPS.LOOKUP_PATH +\r\n        Defines.LOOKUPS.PG +\r\n        status,\r\n      body\r\n    );\r\n  }\r\n\r\n  getPgGroupById(id: number) {\r\n    let body = { pgGroupId: id };\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.LOOKUPS.LOOKUP_PATH +\r\n        Defines.LOOKUPS.PG +\r\n        Defines.CRUD.GET,\r\n      body\r\n    );\r\n  }\r\n  \r\n  updatePriceGroups(type: string, list: any) {\r\n    let body = { priceGroupList: list };\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.LOOKUPS.LOOKUP_PATH +\r\n        Defines.LOOKUPS.PRICES +\r\n        Defines.CRUD.UPDATE_BATCH,\r\n      body\r\n    );\r\n  }\r\n  deletePriceGroup(id: any) {\r\n    let body = { pgGroupId: id };\r\n    return this.http.post<ApiResponse<any>>(\r\n      environment.url +\r\n        Defines.LOOKUPS.LOOKUP_PATH +\r\n        Defines.LOOKUPS.PG +\r\n        Defines.CRUD.DELETE,\r\n      body\r\n    );\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApiResponse } from 'src/app/shared/statics/apiResponse';\r\nimport { Defines } from 'src/app/shared/statics/defines';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Rateplan } from '../models/rateplan.model';\r\nimport { RateplanGroup } from '../models/rateplanGroup.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RateplansService {\r\n  baseUrl: string = environment.url + Defines.LOOKUPS.LOOKUP_PATH;\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getAllRatePlans() {\r\n    return this.http.post<ApiResponse<any>>(\r\n      this.baseUrl +\r\n        Defines.RATEPLANS_ENDPOINTS.RATEPALN +\r\n        Defines.CRUD.GET_ALL,\r\n      {}\r\n    );\r\n  }\r\n  public updateRatePlan(rateplans: Rateplan[]) {\r\n    let updatedrateplans: any[] = [];\r\n    for (let rateplan of rateplans) {\r\n      updatedrateplans.push({\r\n        ratePlanCode: rateplan.ratePlanCode,\r\n        showFlag: rateplan.showFlag,\r\n        ratePlanGroupKey: rateplan.ratePlanGroupKey,\r\n      });\r\n    }\r\n    return this.http.post<ApiResponse<any>>(\r\n      this.baseUrl + Defines.RATEPLANS_ENDPOINTS.RATEPALN + Defines.CRUD.UPDATE,\r\n      {\r\n        ...updatedrateplans,\r\n      }\r\n    );\r\n  }\r\n  public updateRateplansList(rateplans: Rateplan[]) {\r\n    console.log(rateplans);\r\n    let updatedrateplans: any[] = [];\r\n    for (let rateplan of rateplans) {\r\n      updatedrateplans.push({\r\n        ratePlanCode: rateplan.ratePlanCode,\r\n        showFlag: rateplan.showFlag,\r\n        ratePlanGroupKey: rateplan.ratePlanGroupKey,\r\n      });\r\n    }\r\n    return this.http.post<ApiResponse<any>>(\r\n      this.baseUrl +\r\n        Defines.RATEPLANS_ENDPOINTS.RATEPALN +\r\n        Defines.CRUD.UPDATE_BATCH,\r\n      {\r\n        ratePlans: [...updatedrateplans],\r\n      }\r\n    );\r\n  }\r\n  public getRateplaneGroup(key: any) {\r\n    return this.http.post<ApiResponse<any>>(\r\n      this.baseUrl +\r\n        Defines.RATEPLANS_ENDPOINTS.RATEPALNGROUPS +\r\n        Defines.CRUD.GET,\r\n      { ratePlanGroupKey: parseInt(key) }\r\n    );\r\n  }\r\n  public getAllRatePlanGroups() {\r\n    return this.http.post<ApiResponse<any>>(\r\n      this.baseUrl +\r\n        Defines.RATEPLANS_ENDPOINTS.RATEPALNGROUPS +\r\n        Defines.CRUD.GET_ALL,\r\n      {}\r\n    );\r\n  }\r\n  public updateRatePlanGroup(rateplanGroup: RateplanGroup) {\r\n    return this.http.post<ApiResponse<any>>(\r\n      this.baseUrl +\r\n        Defines.RATEPLANS_ENDPOINTS.RATEPALNGROUPS +\r\n        Defines.CRUD.UPDATE,\r\n      { ...rateplanGroup }\r\n    );\r\n  }\r\n  public createRateplanGroup(rateplaneGroup: RateplanGroup) {\r\n    return this.http.post<ApiResponse<any>>(\r\n      this.baseUrl +\r\n        Defines.RATEPLANS_ENDPOINTS.RATEPALNGROUPS +\r\n        Defines.CRUD.ADD,\r\n      rateplaneGroup\r\n    );\r\n  }\r\n  public deletRateplanGroup(ratePlanGroupKey: number) {\r\n    return this.http\r\n      .post<ApiResponse<any>>(\r\n        this.baseUrl +\r\n          Defines.RATEPLANS_ENDPOINTS.RATEPALNGROUPS +\r\n          Defines.CRUD.DELETE,\r\n        { ratePlanGroupKey }\r\n      )\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ApiResponse } from 'src/app/shared/statics/apiResponse';\nimport { Defines } from 'src/app/shared/statics/defines';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TariffsClassesService {\n  searchSubject = new Subject<any>();\n  clearSubject = new Subject<any>();\n  constructor(private http:HttpClient) { }\n\n  getAllServices(type:string) {\n    let serviceType = type === \"tariffs\"? Defines.LOOKUPS.TARIFFS:Defines.LOOKUPS.CLASSES;\n    return this.http.post<ApiResponse<any>>(\n      environment.url +\n        Defines.LOOKUPS.LOOKUP_PATH+serviceType+Defines.CRUD.GET_ALL,\n      {}\n    );\n  }\n  updateServices(type:string,list:any) {\n    let serviceType = type === \"tariffs\"? Defines.LOOKUPS.TARIFFS:Defines.LOOKUPS.CLASSES;\n    let body = type === \"tariffs\"? {tariffModelList:list}:{serviceClasseList:list}    \n    return this.http.post<ApiResponse<any>>(\n      environment.url +\n        Defines.LOOKUPS.LOOKUP_PATH+serviceType+Defines.CRUD.UPDATE_BATCH,\n      body\n    );\n  }\n\n}\n","<div class=\"wrapper\">\r\n  <div class=\"search-title\">\r\n    <span class=\"search\">Search</span>\r\n  </div>\r\n  <form autocomplete=\"off\" [formGroup]=\"searchForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"search-form\" [ngClass]=\"isInline ? 'flexInline' : ''\">\r\n      <div class=\"dropList\" [ngClass]=\"isInline ? 'inlineMode' : 'flex-start'\">\r\n        <span\r\n          *ngFor=\"let input of inputs\"\r\n          [ngClass]=\"isInline ? '' : 'mr-right'\"\r\n        >\r\n          <span class=\"p-float-label\" *ngIf=\"input.type === 'text'\">\r\n            <input\r\n              id=\"input.label\"\r\n              style=\"width: 16vw\"\r\n              type=\"text\"\r\n              formControlName=\"{{ input.controlName }}\"\r\n              pInputText\r\n              maxlength=\"50\"\r\n            />\r\n            <label for=\"input.label\">{{ input.label }} </label>\r\n          </span>\r\n          <span class=\"p-float-label\" *ngIf=\"input.type === 'number'\">\r\n            <input\r\n              id=\"input.label\"\r\n              style=\"width: 16vw\"\r\n              type=\"number\"\r\n              formControlName=\"{{ input.controlName }}\"\r\n              pInputText\r\n              maxlength=\"50\"\r\n            />\r\n            <label for=\"input.label\">{{ input.label }} </label>\r\n          </span>\r\n          <span class=\"p-float-label\" *ngIf=\"input.type === 'date'\">\r\n            <p-calendar formControlName=\"{{ input.controlName }}\"\r\n            (onSelect)=\"onSubmit()\"></p-calendar>\r\n            <label for=\"input.label\">{{ input.label }} </label>\r\n          </span>\r\n          <span class=\"p-float-label\" *ngIf=\"input.type === 'dropDown'\">\r\n            <p-dropdown\r\n              styleClass=\"searchDrop\"\r\n              [options]=\"input.options\"\r\n              [optionLabel]=\"\r\n                input.controlName == 'ratePlanGroupKey' ? 'ratePlanGroup' : 'id'\r\n              \"\r\n              [optionValue]=\"\r\n                input.controlName == 'ratePlanGroupKey'\r\n                  ? 'ratePlanGroupKey'\r\n                  : 'value'\r\n              \"\r\n              [showClear]=\"true\"\r\n              [autoDisplayFirst]=\"false\"\r\n              formControlName=\"{{ input.controlName }}\"\r\n              (keyup.enter)=\"onSubmit()\"\r\n            ></p-dropdown>\r\n            <label for=\"input.label\">{{ input.label }} </label>\r\n          </span>\r\n          <span class=\"check\" *ngIf=\"input.type === 'checkbox'\">\r\n            <p-checkbox\r\n              [binary]=\"true\"\r\n              [trueValue]=\"1\"\r\n              [falseValue]=\"0\"\r\n              formControlName=\"{{ input.controlName }}\"\r\n            ></p-checkbox>\r\n            <label class=\"check-label\">{{ input.label }} </label>\r\n          </span>\r\n        </span>\r\n      </div>\r\n      <div class=\"btns\">\r\n        <button\r\n          pButton\r\n          class=\"btn btn-light\"\r\n          type=\"button\"\r\n          label=\"Reset\"\r\n          (click)=\"resetForm()\"\r\n        >\r\n          <i class=\"pi pi-refresh\"></i>\r\n        </button>\r\n        <span class=\"break\">|</span>\r\n        <button\r\n          pButton\r\n          class=\"btn btn-basic\"\r\n          style=\"width: 100px\"\r\n          type=\"submit\"\r\n          label=\"Search\"\r\n        ></button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { TariffsClassesService } from 'src/app/services-tariffs/services/tariffs-classes.service';\r\nimport { Inputs } from '../../models/inputs.model';\r\n\r\n@Component({\r\n  selector: 'app-service-form',\r\n  templateUrl: './service-form.component.html',\r\n  styleUrls: ['./service-form.component.scss'],\r\n})\r\nexport class ServiceFormComponent implements OnInit {\r\n  @Input('source') source!: string;\r\n  @Input('inputs') inputs!: Inputs[];\r\n  @Input('isInline') isInline!:boolean;\r\n  serviceType: string = 'Service classes';\r\n  searchForm!: FormGroup;\r\n  constructor(private tariffClassesService: TariffsClassesService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  initForm() {\r\n    switch (this.source) {\r\n      case 'tariffs':\r\n        this.searchForm = new FormGroup({\r\n          tariffModelName: new FormControl(),\r\n          tariffModelType: new FormControl(),\r\n          hybird: new FormControl(),\r\n          contractType: new FormControl(),\r\n          activationSource: new FormControl(),\r\n          bundleType: new FormControl(),\r\n          deactivationSourceFlag: new FormControl(),\r\n        });\r\n\r\n        break;\r\n      case 'classes':\r\n        this.searchForm = new FormGroup({\r\n          serviceClassName: new FormControl(),\r\n          serviceClassType: new FormControl(),\r\n          hybird: new FormControl(),\r\n          contractType: new FormControl(),\r\n          activationSource: new FormControl(),\r\n          bundleType: new FormControl(),\r\n          deacSourceFlag: new FormControl(),\r\n        });\r\n        break;\r\n      case 'rateplans':\r\n        this.searchForm = new FormGroup({\r\n          ratePlan: new FormControl(),\r\n          ratePlanType: new FormControl(),\r\n          activationSourceFlag: new FormControl(),\r\n          contractType: new FormControl(),\r\n          showFlag: new FormControl(),\r\n          ratePlanGroupKey: new FormControl(),\r\n        });\r\n        break;\r\n      case 'rateplansGroups':\r\n        this.searchForm = new FormGroup({\r\n          description: new FormControl(),\r\n          ratePlanGroup: new FormControl(),\r\n          showFlag: new FormControl(),\r\n        });\r\n        break;\r\n\r\n      case 'prices':\r\n        this.searchForm = new FormGroup({\r\n          priceGroup: new FormControl(),\r\n          pgGroup: new FormControl(),\r\n        });\r\n        break;\r\n      case 'pgGroups':\r\n        this.searchForm = new FormGroup({\r\n          pgGroup: new FormControl(),\r\n          description: new FormControl(),\r\n          showFlag: new FormControl(),\r\n        });\r\n        break;\r\n      case 'footprint':\r\n        this.searchForm = new FormGroup({\r\n          userId: new FormControl(),\r\n          date: new FormControl(),\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    this.tariffClassesService.searchSubject.next(this.searchForm.value);\r\n  }\r\n  \r\n\r\n  resetForm() {\r\n    this.searchForm.reset();\r\n    this.tariffClassesService.clearSubject.next(true);\r\n  }\r\n}\r\n","<form autocomplete=\"off\" [formGroup]=\"servicesForm\" (ngSubmit)=\"updateList()\">\r\n  <p-table\r\n    #dt\r\n    [value]=\"getControls()\"\r\n    styleClass=\"p-datatable-customers  p-datatable-striped\"\r\n    [paginator]=\"tableList.length > 0\"\r\n    [totalRecords]=\"tableList.length\"\r\n    dataKey=\"id\"\r\n    [rows]=\"pageSize\"\r\n    [loading]=\"loading\"\r\n    [rowsPerPageOptions]=\"[5, 15, 25, 50]\"\r\n  >\r\n    <ng-template pTemplate=\"header\">\r\n      <tr>\r\n        <th *ngFor=\"let input of inputs\">{{ input.label }}</th>\r\n        <ng-container *ngIf=\"enableUpdate || enableDelete || viewDetails\">\r\n          <th *ngIf=\"source == 'rateplansGroups' || source == 'pgGroups'\">\r\n            <div class=\"mt-2\"><span class=\"break\">|</span></div>\r\n          </th>\r\n          <th *ngIf=\"source == 'rateplansGroups' || source == 'pgGroups'\">\r\n            Actions\r\n          </th>\r\n        </ng-container>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-rowData let-rowIndex=\"rowIndex\">\r\n      <ng-container formArrayName=\"servicesArray\">\r\n        <tr\r\n          [formGroupName]=\"rowIndex\"\r\n          (click)=\"source == 'footprint' ? openLogDetails(rowIndex) : ''\"\r\n          [ngClass]=\"source == 'footprint' ? 'pointer' : ''\"\r\n        >\r\n          <td *ngFor=\"let input of inputs\">\r\n            <span *ngIf=\"input.type === 'text'\">{{\r\n              rowData.get(input.controlName).value\r\n            }}</span>\r\n            <span *ngIf=\"input.type === 'dropDown'\" class=\"p-float-label\">\r\n              <p-dropdown\r\n                styleClass=\"tableDrop\"\r\n                [options]=\"input.options\"\r\n                [placeholder]=\"input.label\"\r\n                [optionLabel]=\"\r\n                  input.controlName == 'ratePlanGroupKey'\r\n                    ? 'ratePlanGroup'\r\n                    : 'id'\r\n                \"\r\n                [optionValue]=\"\r\n                  input.controlName == 'ratePlanGroupKey'\r\n                    ? 'ratePlanGroupKey'\r\n                    : 'value'\r\n                \"\r\n                [showClear]=\"\r\n                  this.source == 'classes' || this.source == 'tariffs'\r\n                    ? true\r\n                    : false\r\n                \"\r\n                [autoDisplayFirst]=\"false\"\r\n                formControlName=\"{{ input.controlName }}\"\r\n              ></p-dropdown>\r\n            </span>\r\n            <div>\r\n              <p-checkbox\r\n                *ngIf=\"input.type === 'checkbox'\"\r\n                [disabled]=\"input.disabled\"\r\n                [binary]=\"true\"\r\n                [trueValue]=\"1\"\r\n                [falseValue]=\"0\"\r\n                formControlName=\"{{ input.controlName }}\"\r\n              ></p-checkbox>\r\n            </div>\r\n          </td>\r\n          <ng-container *ngIf=\"enableUpdate || enableDelete || viewDetails\">\r\n            <td *ngIf=\"source == 'rateplansGroups' || source == 'pgGroups'\">\r\n              <div class=\"mt-2\"><span class=\"break\">|</span></div>\r\n            </td>\r\n            <td *ngIf=\"source == 'rateplansGroups' || source == 'pgGroups'\">\r\n              <button\r\n                *ngIf=\"enableUpdate || viewDetails\"\r\n                pButton\r\n                type=\"button\"\r\n                class=\"edit-button mr-3\"\r\n                iconPos=\"left\"\r\n                (click)=\"manageEdit(rowData, rowIndex)\"\r\n              >\r\n                <span *ngIf=\"enableUpdate\">\r\n                  <i class=\"icon-edit\"></i> Edit</span\r\n                >\r\n                <span *ngIf=\"viewDetails && !enableUpdate\">\r\n                  <i class=\"icon-eye\"></i> View Details</span\r\n                >\r\n              </button>\r\n              <button\r\n                *ngIf=\"enableDelete\"\r\n                pButton\r\n                type=\"button\"\r\n                class=\"delete-button mr-3\"\r\n                iconPos=\"left\"\r\n                (click)=\"manageDelete($event, rowData, rowIndex)\"\r\n              >\r\n                <i class=\"pi pi-trash\"></i> Delete\r\n              </button>\r\n            </td>\r\n          </ng-container>\r\n        </tr>\r\n      </ng-container>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"emptymessage\">\r\n      <tr>\r\n        <td colspan=\"7\" style=\"text-align: center\">No Data found.</td>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template\r\n      pTemplate=\"paginatorright\"\r\n      *ngIf=\"!(source === 'rateplansGroups' || source === 'pgGroups')\"\r\n    >\r\n      <button\r\n        *ngIf=\"enableUpdate\"\r\n        [disabled]=\"Changeditems.length == 0\"\r\n        pButton\r\n        class=\"btn btn-basic\"\r\n        style=\"width: 100px\"\r\n        type=\"submit\"\r\n        label=\"Submit\"\r\n      ></button>\r\n    </ng-template>\r\n  </p-table>\r\n</form>\r\n<p-confirmDialog\r\n  class=\"confirm-dialog\"\r\n  header=\"Confirmation\"\r\n  icon=\"pi pi-exclamation-triangle\"\r\n></p-confirmDialog>\r\n","import {\r\n  AfterContentChecked,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { RateplansService } from 'src/app/rateplans/services/rateplans.service';\r\nimport { Table } from 'primeng/table';\r\nimport { Service } from 'src/app/services-tariffs/models/service.model';\r\nimport { TariffsClassesService } from 'src/app/services-tariffs/services/tariffs-classes.service';\r\nimport { Inputs } from '../../models/inputs.model';\r\nimport { map, merge, Subject, Subscription, takeUntil } from 'rxjs';\r\nimport { PricesService } from 'src/app/prices/services/prices.service';\r\nimport { Router } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { FootprintService } from '../../services/footprint-service/footprint.service';\r\nimport { HeaderService } from 'src/app/core/services/header-service/header.service';\r\n@Component({\r\n  selector: 'app-services-list',\r\n  templateUrl: './services-list.component.html',\r\n  styleUrls: ['./services-list.component.scss'],\r\n})\r\nexport class ServicesListComponent\r\n  implements OnInit, AfterContentChecked, OnDestroy\r\n{\r\n  servicesList!: any[];\r\n  @Input('source') source!: string;\r\n  @Input('inputs') inputs!: Inputs[];\r\n  @Input('logs') logs!: any[];\r\n  @Input('enableUpdate') enableUpdate!: boolean;\r\n  @Input('enableDelete') enableDelete!: boolean;\r\n  @Input('viewDetails') viewDetails!: boolean;\r\n  @ViewChild('dt') dt: Table | undefined;\r\n  loading: boolean = false;\r\n  pageSize: number = 5;\r\n  servicesForm!: FormGroup;\r\n  tableList: Service[] = [];\r\n  searchSubscription!: Subscription;\r\n  tableListclone!: any[];\r\n  clearSubscription!: Subscription;\r\n  tableName!: string;\r\n  changesUnsubscribe = new Subject<any>();\r\n  Changeditems: any[] = [];\r\n  rowIndex!: number;\r\n  targetElement!: any;\r\n  footPrintSubscription!: Subscription;\r\n  epochDate!: any;\r\n  showDialog!: boolean;\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private tariffsClasses: TariffsClassesService,\r\n    private rateplansService: RateplansService,\r\n    private pricesService: PricesService,\r\n    private confirmationService: ConfirmationService,\r\n    private router: Router,\r\n    private priceService: PricesService,\r\n    private footprintService: FootprintService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.getALLServices();\r\n\r\n    this.searchSubscription = this.tariffsClasses.searchSubject.subscribe(\r\n      (filters: any) => {\r\n        if (this.source !== 'footprint') {\r\n          this.servicesList = this.tableListclone;\r\n          for (const key in filters) {\r\n            if (filters[key]) {\r\n              this.servicesList = this.servicesList.filter((el: any) => {\r\n                if(typeof el[key] == 'string'){\r\n                filters[key] = filters[key].toLowerCase();\r\n                let searchStr = el[key].toLowerCase();\r\n                return searchStr.includes(filters[key])\r\n                } return el[key] === filters[key];\r\n              });\r\n            }\r\n          }\r\n          this.clearFormArray();\r\n          this.fillFormArray();\r\n        } else {\r\n          this.clearFormArray();\r\n          this.epochDate = filters.date ? filters.date.getTime() : null;\r\n          this.getAllFootprints(this.epochDate, filters.userId);\r\n        }\r\n      }\r\n    );\r\n    this.clearSubscription = this.tariffsClasses.clearSubject.subscribe(\r\n      (flag) => {\r\n        this.servicesList = this.tableListclone;\r\n        this.clearFormArray();\r\n        this.fillFormArray();\r\n      }\r\n    );\r\n  }\r\n  getALLServices() {\r\n    if (this.source == 'rateplans') {\r\n      this.rateplansService.getAllRatePlans().subscribe((resp) => {\r\n        let oldratePlan = this.footprintService.handleRateplansoldValue(\r\n          resp.payload\r\n        );\r\n        this.footprintService.handleOldValue(oldratePlan, 'ratePlanCode');\r\n        this.servicesList = resp.payload;\r\n        this.tableListclone = this.servicesList;\r\n        this.fillFormArray();\r\n      });\r\n    } else if (this.source == 'rateplansGroups') {\r\n      this.rateplansService.getAllRatePlanGroups().subscribe((resp) => {\r\n        this.servicesList = resp.payload;\r\n        this.tableListclone = this.servicesList;\r\n        this.fillFormArray();\r\n      });\r\n    } else if (this.source == 'classes' || this.source == 'tariffs') {\r\n      this.tariffsClasses.getAllServices(this.source).subscribe((res) => {\r\n        this.servicesList =\r\n          this.source === 'classes'\r\n            ? res.payload.serviceClasseList\r\n            : res.payload.tariffModelList;\r\n        this.tableListclone =\r\n          this.source === 'classes'\r\n            ? res.payload.serviceClasseList\r\n            : res.payload.tariffModelList;\r\n        let key =\r\n          this.source === 'classes' ? 'serviceClassCode' : 'tariffModelCode'; // to filter changed old values (footprint service )\r\n        this.footprintService.handleOldValue(this.tableListclone, key);\r\n        this.fillFormArray();\r\n      });\r\n    } else if (this.source == 'prices' || this.source == 'pgGroups') {\r\n      this.pricesService.getAll(this.source).subscribe((res) => {\r\n        if (this.source === 'prices')\r\n          this.footprintService.handlePriceGroupOldValue(res);\r\n        this.servicesList =\r\n          this.source === 'prices'\r\n            ? this.handlePriceGroupResponse(res)\r\n            : res.payload.allPriceGroupGroupsResponses;\r\n        this.tableListclone =\r\n          this.source === 'prices'\r\n            ? this.handlePriceGroupResponse(res)\r\n            : res.payload.allPriceGroupGroupsResponses;\r\n        this.fillFormArray();\r\n      });\r\n    } else if (this.source == 'footprint') {\r\n      this.getAllFootprints();\r\n    }\r\n  }\r\n\r\n  handlePriceGroupResponse(response: any) {\r\n    return response.payload.priceGroupModel.map((item: any) => {\r\n      item.pgGroup = item.pgGroupKey ? item.pgGroupKey.pgGroup : null;\r\n      item.pgKey = item.pgGroupKey ? item.pgGroupKey.pgGroupKey : null;\r\n      return item;\r\n    });\r\n  }\r\n\r\n  clearFormArray() {\r\n    while ((<FormArray>this.servicesForm.get('servicesArray')).length !== 0) {\r\n      (<FormArray>this.servicesForm.get('servicesArray')).removeAt(0);\r\n    }\r\n  }\r\n\r\n  initForm() {\r\n    this.servicesForm = new FormGroup({\r\n      servicesArray: new FormArray([]),\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  getControls() {\r\n    return (<FormArray>this.servicesForm.get('servicesArray')).controls;\r\n  }\r\n\r\n  fillFormArray() {\r\n    this.servicesList.forEach((item: any) => {\r\n      switch (this.source) {\r\n        case 'tariffs':\r\n          this.tableName = 'tariffModelName';\r\n          (<FormArray>this.servicesForm.get('servicesArray')).push(\r\n            new FormGroup({\r\n              tariffModelCode: new FormControl(item.tariffModelCode),\r\n              tariffModelName: new FormControl(item.tariffModelName),\r\n              tariffModelType: new FormControl(item.tariffModelType),\r\n              hybird: new FormControl(item.hybird),\r\n              activationSource: new FormControl(item.activationSource),\r\n              contractType: new FormControl(item.contractType),\r\n              bundleType: new FormControl(item.bundleType),\r\n              deactivationSourceFlag: new FormControl(\r\n                item.deactivationSourceFlag\r\n              ),\r\n            })\r\n          );\r\n\r\n          break;\r\n        case 'classes':\r\n          this.tableName = 'serviceClassName';\r\n          (<FormArray>this.servicesForm.get('servicesArray')).push(\r\n            new FormGroup({\r\n              serviceClassCode: new FormControl(item.serviceClassCode),\r\n              serviceClassName: new FormControl(item.serviceClassName),\r\n              serviceClassType: new FormControl(item.serviceClassType),\r\n              hybird: new FormControl(item.hybird),\r\n              activationSource: new FormControl(item.activationSource),\r\n              contractType: new FormControl(item.contractType),\r\n              bundleType: new FormControl(item.bundleType),\r\n              deacSourceFlag: new FormControl(item.deacSourceFlag),\r\n            })\r\n          );\r\n          break;\r\n        case 'rateplans':\r\n          this.tableName = 'ratePlan';\r\n          (<FormArray>this.servicesForm.get('servicesArray')).push(\r\n            new FormGroup({\r\n              ratePlan: new FormControl({\r\n                value: item.ratePlan,\r\n                disabled: true,\r\n              }),\r\n              ratePlanType: new FormControl({\r\n                value: item.ratePlanType,\r\n                disabled: true,\r\n              }),\r\n              activationSourceFlag: new FormControl({\r\n                value: item.activationSourceFlag,\r\n                disabled: true,\r\n              }),\r\n              contractType: new FormControl({\r\n                value: item.contractType,\r\n                disabled: true,\r\n              }),\r\n              showFlag: new FormControl(item.showFlag),\r\n              ratePlanGroupKey: new FormControl(item.ratePlanGroupKey),\r\n            })\r\n          );\r\n          break;\r\n        case 'rateplansGroups':\r\n          this.tableName = 'ratePlanGroup';\r\n          (<FormArray>this.servicesForm.get('servicesArray')).push(\r\n            new FormGroup({\r\n              description: new FormControl(item.description),\r\n              ratePlanGroup: new FormControl(item.ratePlanGroup),\r\n              showFlag: new FormControl({\r\n                value: item.showFlag,\r\n                disabled: true,\r\n              }),\r\n            })\r\n          );\r\n\r\n          break;\r\n        case 'prices':\r\n          (<FormArray>this.servicesForm.get('servicesArray')).push(\r\n            new FormGroup({\r\n              priceGroup: new FormControl(item.priceGroup),\r\n              pgGroup: new FormControl(item.pgGroup),\r\n              pgKey: new FormControl(item.pgKey),\r\n            })\r\n          );\r\n          break;\r\n        case 'pgGroups':\r\n          (<FormArray>this.servicesForm.get('servicesArray')).push(\r\n            new FormGroup({\r\n              pgGroupKey: new FormControl(item.pgGroupKey),\r\n              pgGroup: new FormControl(item.pgGroup),\r\n              description: new FormControl(item.description),\r\n              showFlag: new FormControl(item.showFlag),\r\n            })\r\n          );\r\n          break;\r\n        case 'footprint':\r\n          (<FormArray>this.servicesForm.get('servicesArray')).push(\r\n            new FormGroup({\r\n              userName: new FormControl(item.userName),\r\n              userId: new FormControl(item.userId),\r\n              pageName: new FormControl(item.pageName),\r\n              date: new FormControl(item.date),\r\n              objectIdentifier: new FormControl(item.objectIdentifier),\r\n              actionName: new FormControl(item.actionName),\r\n            })\r\n          );\r\n          break;\r\n      }\r\n    });\r\n    this.tableList = [...this.servicesForm.controls['servicesArray'].value];\r\n    this.detectFormArryChanges();\r\n  }\r\n\r\n  updateList() {\r\n    if (this.source == 'rateplans') {\r\n      // console.log(this.Changeditems);\r\n      this.Changeditems = this.Changeditems\r\n        ? this.Changeditems.map((item) => {\r\n            return item.data;\r\n          })\r\n        : [];\r\n      this.footprintService.handleNewValue(this.Changeditems);\r\n      this.rateplansService\r\n        .updateRateplansList(this.Changeditems)\r\n        .subscribe((resp) => {\r\n          this.Changeditems = [];\r\n          this.clearFormArray();\r\n          this.getALLServices();\r\n        });\r\n    } else if (this.source === 'classes' || this.source === 'tariffs') {\r\n      this.Changeditems = this.Changeditems\r\n        ? this.Changeditems.map((item) => {\r\n            console.log('Changeditems', item.data);\r\n\r\n            return item.data;\r\n          })\r\n        : [];\r\n      this.footprintService.handleNewValue(this.Changeditems);\r\n      this.tariffsClasses\r\n        .updateServices(this.source, this.Changeditems)\r\n        .subscribe((res) => {\r\n          this.Changeditems = [];\r\n          this.clearFormArray();\r\n          this.getALLServices();\r\n        });\r\n    } else if (this.source == 'prices' || this.source == 'pgGroups') {\r\n      this.Changeditems = this.Changeditems.map((item) => {\r\n        item.data = {\r\n          priceGroupCode: item.data.priceGroupCode,\r\n          pgGroupKey: item.data.pgKey,\r\n        };\r\n        return item.data;\r\n      });\r\n      this.footprintService.handleNewValue(this.Changeditems);\r\n      this.pricesService\r\n        .updatePriceGroups(this.source, this.Changeditems)\r\n        .subscribe((res) => {\r\n          this.Changeditems = [];\r\n          this.clearFormArray();\r\n          this.getALLServices();\r\n        });\r\n      // console.log('Changeditems updated list', this.Changeditems);\r\n    }\r\n  }\r\n\r\n  manageEdit(row: any, index: number) {\r\n    if (this.source === 'pgGroups') {\r\n      // console.log('row', row.value.pgGroupKey);\r\n      this.editPgGroup(row.value.pgGroupKey);\r\n    } else if (this.source === 'rateplansGroups')\r\n      this.editRateplaneGroup(index);\r\n  }\r\n\r\n  manageDelete(event: any, row: any, index: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message:\r\n        this.source === 'rateplansGroups'\r\n          ? 'Are you sure that you want to delete this Rateplan Group ?'\r\n          : 'Are you sure that you want to delete this PG Group ?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      accept: () => {\r\n        //confirm action\r\n        if (this.source === 'rateplansGroups') {\r\n          let ratePlanGroupKey = this.servicesList[index].ratePlanGroupKey;\r\n          this.footprintService.objectIdentifier = ratePlanGroupKey;\r\n          this.rateplansService\r\n            .deletRateplanGroup(ratePlanGroupKey)\r\n            .subscribe((resp) =>\r\n              this.rateplansService.getAllRatePlanGroups().subscribe((resp) => {\r\n                this.servicesList = resp.payload;\r\n                this.tableListclone = this.servicesList;\r\n                (<FormArray>this.servicesForm.get('servicesArray')).clear();\r\n                this.fillFormArray();\r\n              })\r\n            );\r\n        } else if (this.source == 'pgGroups') {\r\n          let id = row.value.pgGroupKey;\r\n          this.footprintService.objectIdentifier = id;\r\n          this.priceService.deletePriceGroup(id).subscribe((resp) => {\r\n            this.priceService.getAll('PG').subscribe((resp) => {\r\n              this.servicesList = resp.payload.allPriceGroupGroupsResponses;\r\n              this.tableListclone = this.servicesList;\r\n              (<FormArray>this.servicesForm.get('servicesArray')).clear();\r\n              this.fillFormArray();\r\n            });\r\n          });\r\n        }\r\n      },\r\n      reject: () => {\r\n        //reject action\r\n      },\r\n    });\r\n  }\r\n  editRateplaneGroup(index: any) {\r\n    let id = this.servicesList[index].ratePlanGroupKey;\r\n    let url =\r\n      this.viewDetails && !this.enableUpdate\r\n        ? 'daily/rateplans/rateplansGroups/view/'\r\n        : 'daily/rateplans/rateplansGroups/edit/';\r\n    url = url + id;\r\n    this.router.navigateByUrl(url);\r\n  }\r\n\r\n  editPgGroup(id: number) {\r\n    let url =\r\n      this.viewDetails && !this.enableUpdate\r\n        ? '/daily/prices/view/'\r\n        : '/daily/prices/edit/';\r\n    url = url + id;\r\n    this.router.navigateByUrl(url);\r\n  }\r\n\r\n  detectFormArryChanges() {\r\n    this.changesUnsubscribe.next(true);\r\n    merge(\r\n      ...(<FormArray>this.servicesForm.get('servicesArray')).controls.map(\r\n        (control: AbstractControl, index: number) =>\r\n          control.valueChanges.pipe(\r\n            takeUntil(this.changesUnsubscribe),\r\n            map((value) => ({ rowIndex: index, control: control, data: value }))\r\n          )\r\n      )\r\n    ).subscribe((changes) => {\r\n      console.log('changes', changes);\r\n      this.rowIndex = changes.rowIndex;\r\n      this.onValueChanged(changes);\r\n    });\r\n  }\r\n\r\n  onValueChanged(changes: any) {\r\n    let existing: boolean = false;\r\n    if (this.Changeditems) {\r\n      this.Changeditems?.map((item: any) => {\r\n        if (item.rowIndex === changes.rowIndex) {\r\n          existing = true;\r\n          if (this.source == 'rateplans') {\r\n            changes.data = {\r\n              ...changes.data,\r\n              ratePlanCode: this.servicesList[this.rowIndex].ratePlanCode,\r\n            };\r\n          } else if (this.source === 'prices') {\r\n            // console.log(\r\n            //   'servicesList',\r\n            //   this.servicesList[this.rowIndex].priceGroupCode\r\n            // );\r\n            changes.data = {\r\n              ...changes.data,\r\n              priceGroupCode: this.servicesList[this.rowIndex].priceGroupCode,\r\n            };\r\n          }\r\n          console.log('changes exist item', item);\r\n          return (item.data = JSON.parse(JSON.stringify(changes.data)));\r\n        }\r\n      });\r\n      console.log('changesItem', this.Changeditems);\r\n    }\r\n    if (this.source == 'rateplans') {\r\n      changes.data = JSON.parse(\r\n        JSON.stringify({\r\n          ...changes.data,\r\n          ratePlanCode: this.servicesList[this.rowIndex].ratePlanCode,\r\n        })\r\n      );\r\n    } else if (this.source === 'prices') {\r\n      changes.data = JSON.parse(\r\n        JSON.stringify({\r\n          ...changes.data,\r\n          priceGroupCode: this.servicesList[this.rowIndex].priceGroupCode,\r\n        })\r\n      );\r\n    }\r\n    if (!existing) console.log('changes first time', changes);\r\n    if (!existing) this.Changeditems.push(changes);\r\n  }\r\n\r\n  getAllFootprints(date?: number, userId?: number) {\r\n    let bodyRequest = {\r\n      userId: userId ? userId : null, //can be null get u current user\r\n      echoDate: date ? date : this.footprintService.getTodayInTime(),\r\n    };\r\n    this.footPrintSubscription = this.footprintService\r\n      .getFootprintsRequest(bodyRequest)\r\n      .subscribe((res) => {\r\n        // console.log('logs', res.payload.logModelList);\r\n        this.servicesList = res.payload.logModelList;\r\n        this.tableListclone = res.payload.logModelList;\r\n        this.fillFormArray();\r\n      });\r\n  }\r\n\r\n  openLogDetails(index: number) {\r\n    let data = this.servicesList[index].transactionUserDetails;\r\n    let emptyVal = data.length > 0 ? false : true;\r\n    // console.log('footdata', data);\r\n    let dialogDetails = {\r\n      show: true,\r\n      empty: emptyVal,\r\n      data: data,\r\n    };\r\n    this.footprintService.openDialog.next(dialogDetails);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.searchSubscription?.unsubscribe();\r\n    this.clearSubscription?.unsubscribe();\r\n    this.footPrintSubscription?.unsubscribe();\r\n  }\r\n}\r\n"]}